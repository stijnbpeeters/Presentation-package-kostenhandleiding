---
title: "Estimating Dutch costs of productivity losses in R using up-to-date data from Statistics Netherlands (CBS) with the R-package cbsodataR"
author: Frederick Thielen & Stijn Peeters
format:
  revealjs:
   theme: default
title-slide-attributes:
  data-background-image: "Figures week 2/Figure title page.PNG"
  data-background-size: cover
  data-background-opacity: "0.5"
navigation-mode: linear
incremental: true
---

# Productivity losses üìñ

Costs of productivity losses are **defined** in the [costing manual](https://www.zorginstituutnederland.nl/publicaties/publicatie/2024/01/16/richtlijn-voor-het-uitvoeren-van-economische-evaluaties-in-de-gezondheidszorg) as:

[*"Costs arising from productivity losses and replacement costs due to illness, absenteeism, disability, and/or death of productive individuals, both in paid and unpaid work"*]{.smallcaps}

## Example: productivity lossess in paid work (absenteeism)

The [costing manual](https://www.zorginstituutnederland.nl/publicaties/publicatie/2024/01/16/richtlijn-voor-het-uitvoeren-van-economische-evaluaties-in-de-gezondheidszorg) recommends the friction cost method, calculated as:

$$ 
Frictionperiod = \frac{365}{(\frac{Vf}{Vo})} + 28
$$ *Vf* = Vacancies filled

*Vo* = Vacancies open

## Method üîç

-   Estimates in the costing manual are mentioned, but for a fixed date (reference year is 2022)

-   Relies in the Netherlands on data from Statistics Netherlands (CBS)

-   Is only the first step to determine productivity losses:

    -   At least productivity prices are needed
    -   Productivity losses for unpaid work may be relevant
    -   Presenteeism may be relevant

## Method üîç

::: callout-warning
The friction period and all other elements need to be re-calculated for the year of the analysis!
:::

## The "classic approach?

One possibility is to:

-   Download CBS data
-   Perform calculation (maybe using some old Excel formulas from another project)?

## Downside? üòí

-   Time consuming
-   Probably much copy/paste from downloaded data --\> prone to mistakes
-   What if project takes long(er) than expected and updates are necessary?

## Other possibilities? ü§©

Standardise the approach in R (write a function in a package):

-   Automatically download CBS data from CBS servers
-   Only keep what you need
-   Build in flexibility (e.g., updates when needed)

## Example: calculating the friction period for the Netherlands üë®‚Äçüíª

Several steps:

1.  Identify needed data source ¬†
2.  Download data
3.  Do calculations
4.  Put everything in a function
5.  Use & re-use

## Step 1: data sources {auto-animate="true"}

To obtain the data you need from CBS, you need an identifier.

. . .

You can find this identifier in two ways

1.  Through the [CBS website](https://www.cbs.nl/nl-nl/cijfers/detail/80472ned) or Google

2.  Through a catalogue retrievable in the CBS R package

## Step 1: data sources {auto-animate="\"true"}

::: nonincremental
2.  Through a catalogue retrievable in the CBS R package

```{r}
#| echo: true

library("cbsodataR")

res <- cbsodataR::cbs_search(query = "vacature") |>  
  dplyr::select("Identifier", "Title")
```
:::

. . .

**Output**

```{r}
#| echo: false

res
```

## Step 2: Download data

-   Identifier is now known (*80472ned*)
-   Now download the data by `cbs_get_data()` (from cbsodataR package)

. . .

Two options ‚ùì

1.  Download every time code runs

<!-- -->

i)  üëç Less work for the maintainer

ii) üëé Time consuming to download every time

iii) üëé Probably not needed since updates are not that frequent (yearly)

## Download store and update every year by the maintainer

::: callout-warning
‚ùó‚ùï Helper function (not a function in the package)
:::

. . .

*Steps*

-   Define a folder where CBS data should be stored (In this presentation `Test Data` --\> `CBS Data`)

-   Store as .RDS file

## Write function for the import of the data

. . . **But first‚ùó‚ùï: document your function using Roxygen**

. . .

```{=html}
<iframe width="780" height="800" src="https://r-pkgs.org/man.html#sec-man-workflow" title="Roxygen information"></iframe>
```
. . .

## Why is documentation helpful? 

```{r}
#| echo: true

?cbs_get_data()
```

. . .

<embed src = "Figures week 2/cbs_get_data.pdf" type = "application/pdf" height = 600 width = 100% >

</object>


## üîô to the function for the import of the data


```{r}
#| echo: true

#' A wrapper function to download a CBS dataframe for the friction period over multiple years
#' @param folder_name The folder name to were the data should be downloaded.
#' @param file_name The file name to where the data should be downloaded 
#' @param update Whether the data should be updated (when year of living > year of datafile) default is FALSE
#' @param identifier The identifier of the CBS dataset needed to calculate the friction period (Open and filled vacancies in the Netherlands)
#' @keywords Generic, CBS
#' @export df_cbs_friction_period

df_cbs_friction_period <- 
  function(
    folder_name = "Test Data/CBS Data",
    file_name = "raw_friction_period.RDS",
    update = FALSE,
    identifier = "80472ned"){

# Download and update 
dir_path <- folder_name
file_path <- paste0(lubridate::year(Sys.Date()),
                    file_name)
full_path <- paste0(dir_path, "/", file_path)

# Create directory if not existing
if(!dir.exists(here::here(dir_path)))
      dir.create(here::here(dir_path),
                 recursive = TRUE)

## If update is TRUE, download new dataset with years

if(update == TRUE | !file.exists(here::here(full_path))){
  df_vacancy <- cbsodataR::cbs_get_data(identifier)
  saveRDS(df_vacancy, file = here::here(full_path))
}else{
  df_vacancy <- readRDS(here::here(full_path))
}

return(df_vacancy)
}


```

## Step 3: Calculations

**First: Inspect the data**
```{r}
#| echo: false

df_vacancy <- df_cbs_friction_period(update = TRUE)
```


```{r}
#| echo: true

rmarkdown::paged_table(df_vacancy)
```

## Step 3: Calculations üîß

-   Some variables are "cryptic" --\> what does the `Bedrijfskenmerken` identifier mean?
-   Some variables are not necessary (`OntstaneVacatures_2`)

## Step 3: Calculations üîß

*This can be fixed by* : 

-   `cbsodataR::cbs_add_label_columns()` 
-   `cbsodataR::cbs_add_date_column()` 
-   Removing unnecessary variables in the function

## Step 3: Calculations üîß {auto.animate="true"}

```{r}
#| echo: true
#| code-line-numbers: "22-25"
#' A wrapper function to download a CBS dataframe for the friction period over multiple years
#' @param folder_name The folder name to were the data should be downloaded.
#' @param file_name The file name to where the data should be downloaded 
#' @param update Whether the data should be updated (when year of living > year of datafile) default is FALSE
#' @param identifier The identifier of the CBS dataset needed to calculate the friction period (Open and filled vacancis in the Netherlands)
#' @keywords Generic, CBS
#' @export df_cbs_friction_period

df_cbs_friction_period <- 
  function(
    folder_name = "Test Data/CBS Data",
    file_name = "raw_friction_period.RDS",
    update = FALSE,
    identifier = "80472ned"){

# Download and update 
dir_path <- folder_name
file_path <- paste0(lubridate::year(Sys.Date()),
                    file_name)
full_path <- paste0(dir_path, "/", file_path)

# Create directory if not existing
if(!dir.exists(here::here(dir_path)))
      dir.create(here::here(dir_path),
                 recursive = TRUE)

## If update is TRUE, download new dataset with years

if(update == TRUE | !file.exists(here::here(full_path))){
  df_vacancy <- cbsodataR::cbs_get_data("80472ned") |> 
    cbsodataR::cbs_add_label_columns() |>
    cbsodataR::cbs_add_date_column() |> 
    dplyr::select(!OntstaneVacatures_2)
  
  saveRDS(df_vacancy, file = here::here(full_path))
}else{
  df_vacancy <- readRDS(here::here(full_path))
}

return(df_vacancy)
}

```

## Step 3: Calculations üîß {auto.animate="true"}

```{r}
#| echo: false
df_vacancy1 <- df_cbs_friction_period(update = TRUE)
rmarkdown::paged_table(df_vacancy1)
```

## Step 3: Calculations üîß

*What do we want to measure?* 

-   Interested in yearly average = Perioden_freq = Y 
-   Several industry sectors available --\> all economic activities(identifier = `T001081`)

## Step 3: Calculations üîß 

```{r}
#| echo: true
#| code-line-numbers: "|6-7|37-49"

#' A wrapper function to download a CBS dataframe for the friction period over multiple years
#' @param folder_name The folder name to were the data should be downloaded.
#' @param file_name The file name to where the data should be downloaded 
#' @param update Whether the data should be updated (when year of living > year of datafile) default is FALSE
#' @param identifier The identifier of the CBS dataset needed to calculate the friction period (Open and filled vacancis in the Netherlands)
#' @param industry Industry for which friction period should be calculated. Usually "All economic activities" = "T001081" (default). Check downloaded data with cbsodataR::cbs_add_label_columns() for an other industries.
#' @param yeardays Number of days used to convert years to days. Default is 365.25 days for one year.
#' @keywords Generic, CBS
#' @export df_cbs_friction_period

df_cbs_friction_period <- 
  function(
    folder_name = "Test Data/CBS Data",
    file_name = "raw_friction_period.RDS",
    update = FALSE,
    identifier = "80472ned",
    industry = "T001081",
    yeardays = 365.25){

# Download and update 
dir_path <- folder_name
file_path <- paste0(lubridate::year(Sys.Date()),
                    file_name)
full_path <- paste0(dir_path, "/", file_path)

# Create directory if not existing
if(!dir.exists(here::here(dir_path)))
      dir.create(here::here(dir_path),
                 recursive = TRUE)

## If update is TRUE, download new dataset with years

if(update == TRUE | !file.exists(here::here(full_path))){
  df_vacancy <- cbsodataR::cbs_get_data(identifier) |> 
    cbsodataR::cbs_add_label_columns() |>
    cbsodataR::cbs_add_date_column() |> 
    dplyr::select(!OntstaneVacatures_2) |> 
    dplyr::filter(Perioden_freq == "Y",
           Bedrijfskenmerken %in% c("T001081")) |> 
    dplyr::mutate(Year = lubridate::year(Perioden_Date),
           Friction_period_days = yeardays/(VervuldeVacatures_3/OpenstaandeVacatures_1) + 28,
           Friction_period_weeks = Friction_period_days/7) |> 
    dplyr::distinct(Year,
                    VervuldeVacatures_3,
                    OpenstaandeVacatures_1,
                    Friction_period_days,
                    Friction_period_weeks) |> 
    dplyr::rename(Filled_vacancies = "VervuldeVacatures_3",
                  Open_vacancies = "OpenstaandeVacatures_1")
  
  saveRDS(df_vacancy, file = here::here(full_path))
}else{
  df_vacancy <- readRDS(here::here(full_path))
}
return(df_vacancy)
}


```

## Step 3: Final output
```{r}
#| echo: false
df_vacancy_final <- df_cbs_friction_period(update = TRUE)
rmarkdown::paged_table(df_vacancy_final)
```



##   Step 4: The function in the package

```{r}
#| echo: true

#' A function to download the friction period over one or multiple years
#' @param year The year of which the friction period should be downloaded, multiple years are possible
#' @param type The friction period that should be included (days/weeks),  default is including the whole dataframe
#' @keywords Generic, CBS
#' @export f_cbs_friction_period


f_cbs_friction_period <- function(
    year,
    type = "all"){

# Filter the data for the specified years
  
   friction_period <- readRDS("Test Data/CBS Data/2024raw_friction_period.RDS") |>
    dplyr::filter(Year %in% year)
   
# Select the specified columns or all columns if none specified

   if(type == "weeks"){
     friction_period <- friction_period |> 
       dplyr::select(Friction_period_weeks)
   }else if(type == "days"){
     friction_period <- friction_period |> 
       dplyr::select(Friction_period_days)
   }
   
return(friction_period)
   }
```

## And now? 

-   Friction period = maximum days to acccount for productivity losses 

-   Friction period in days in 2023:

. . .

```{r}
#| echo: true

f_cbs_friction_period(year = 2023, type = "days")
```



