---
title: "Presentation package Dutch Costing Manual"
format:
  revealjs: 
   width: 1150
   margin: 0.1
   theme: default
   mermaid: 
       theme: forest
       flowchart:
         htmlLabels: true
title-slide-attributes:
    data-background-image: "Background/Tatooine.jpeg"
    data-background-size: contain
    data-background-opacity: "0.5"
navigation-mode: linear
---

## Dutch costing manual 📖

::: {.columns}
::: {.column width="40%"}
**Guideline chapters**

Seven chapters combining:

-   *Cost methodologies* 📜

-   *Reference prices* 💸

:::
::: {.column width="60%"}
**Guideline**
<embed src = "Data/Richtlijn.pdf" type = "application/pdf" height = 350 width = 100% >

</object>

:::
:::

## Why a package? 📦

-   Standardization
-   Consistent use of methodologies
-   A good way to familiarize yourself with functions
-   Time saving

![](Figures/Fig2.jpeg){.absolute bottom="0" right="0"}

## Example - Chapter 2 {auto-animate="true"}

In the **valuation** of units, **three topics merit attention**:

1.  *Price index numbers (paragraph 2.6.1.1)*


2.  *Discounting (paragraph 2.6.1.2)*


3.  *Conversion factors (paragraph 2.6.1.3)*


## Example - Chapter 2 {auto-animate="true"}

1.  *Price index numbers (paragraph 2.6.1.1)*

```{r}
#| echo: true

#' A wrapper function to download CBS data for the CPI.
#' @param save_cbs_data Should CPI data be saved? Standard is TRUE
#' @param save_dir Directory where data should be saved. Standard is "data/cbs/"
#' @param file_name File name for the saved CPI data. Standard is "cbs_cpi.RDS
#' @keywords Generic, CBS, CPI
#' @export f_cpi_nl_down

f_cpi_nl_down <- function(
                save_cbs_data = TRUE,
                save_dir = "data/cbs/",
                file_name = "cbs_cpi.RDS"){

        require("cbsodataR")
        require("here")
        require("dplyr")

       df_cpi <- cbsodataR::cbs_get_data("83131ned") %>%
                cbsodataR::cbs_add_date_column() %>%
                cbsodataR::cbs_add_label_columns() %>%
                filter(Perioden_freq == "Y",
                       Bestedingscategorieen_label == "000000 Alle bestedingen") %>%
                select(Bestedingscategorieen_label, Perioden_label, CPI_1 )

        if (save_cbs_data) {
                if (!dir.exists(here::here(save_dir))) {
                        dir.create(here::here(save_dir), recursive = T)
                }

             readr::write_rds(x = df_cpi, file = here(paste0(save_dir, file_name)))
        }

        df_cpi

}
```

## What do we need? 🤔
::: {style="font-size: 45%;"}
<br>

| Description of type                                                  | Input                                                                            | Output                           |   |   |
|----------------------------------------------------------------------|----------------------------------------------------------------------------------|----------------------------------|---|---|
| Function to return the correct indexing factor between two years     | start year, end year                                                             | CPI factor                       |   |   |
| Function to print a table of all used CPI indexes used               | start years, end years                                                           | CPI table with years             |   |   |
| Function to discount (costs or effects)                              | discount rate, (cycle) time                                                      | Discount rate given (cycle) time |   |   |
| Function to convert currencies using purchasing power parities (PPP) | reference year, reference currency, target currency                              | Conversion rate                  |   |   |
| Function to convert and discount at the same time                    | reference year, target year, reference currency, target currency                 | Conversion and CPI combined      |   |   |
| Reference prices of guideline stored as data frame                   | none                                                                             | Data frame with reference prices |   |   |
| Function to apply yearly depreciation and interest                   | new price, replacement price, residual value, depreciation period, interest rate | yearly depreciation and interest |   |   |
| Function to return the frictionperiod for a specified year           | year of interest                                                                 | friction period                  |   |   |
| Function to return productivity costs for a specified year           | year of interest                                                                 | productivity costs               |   |   |
:::

## The road to package development 🏎️

```{mermaid}
%%| fig-height: 1000
flowchart TD
  A[Functions are mapped out for each chapter] --> B[Formation of teams consisting of 2/3 individuals]
B --> C[Each team selects a function]
C --> D[Working in the R Journal Club on this function in three ways]
D --> E[Validating]
D --> F[Rewriting - start from scratch]
D --> G[Find and write]
```

