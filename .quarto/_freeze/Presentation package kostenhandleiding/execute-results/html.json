{
  "hash": "4f72f804340dd8773acb85cd065c8a9b",
  "result": {
    "markdown": "---\ntitle: \"Presentation package Dutch Costing Manual\"\nformat:\n  revealjs: \n   width: 1150\n   margin: 0.1\n   theme: default\n   mermaid: \n       theme: forest\n       flowchart:\n         htmlLabels: true\ntitle-slide-attributes:\n    data-background-image: \"Background/Tatooine.jpeg\"\n    data-background-size: contain\n    data-background-opacity: \"0.5\"\nnavigation-mode: linear\n---\n\n\n## Dutch costing manual 📖\n\n::: {.columns}\n::: {.column width=\"40%\"}\n**Guideline chapters**\n\nSeven chapters combining:\n\n-   *Cost methodologies* 📜\n\n-   *Reference prices* 💸\n\n:::\n::: {.column width=\"60%\"}\n**Guideline**\n<embed src = \"Data/Richtlijn.pdf\" type = \"application/pdf\" height = 350 width = 100% >\n\n</object>\n\n:::\n:::\n\n## Why a package? 📦\n\n-   Standardization\n-   Consistent use of methodologies\n-   A good way to familiarize yourself with functions\n-   Time saving\n\n![](Figures/Fig2.jpeg){.absolute bottom=\"0\" right=\"0\"}\n\n## Example - Chapter 2 {auto-animate=\"true\"}\n\nIn the **valuation** of units, **three topics merit attention**:\n\n1.  *Price index numbers (paragraph 2.6.1.1)*\n\n\n2.  *Discounting (paragraph 2.6.1.2)*\n\n\n3.  *Conversion factors (paragraph 2.6.1.3)*\n\n\n## Example - Chapter 2 {auto-animate=\"true\"}\n\n1.  *Price index numbers (paragraph 2.6.1.1)*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' A wrapper function to download CBS data for the CPI.\n#' @param save_cbs_data Should CPI data be saved? Standard is TRUE\n#' @param save_dir Directory where data should be saved. Standard is \"data/cbs/\"\n#' @param file_name File name for the saved CPI data. Standard is \"cbs_cpi.RDS\n#' @keywords Generic, CBS, CPI\n#' @export f_cpi_nl_down\n\nf_cpi_nl_down <- function(\n                save_cbs_data = TRUE,\n                save_dir = \"data/cbs/\",\n                file_name = \"cbs_cpi.RDS\"){\n\n        require(\"cbsodataR\")\n        require(\"here\")\n        require(\"dplyr\")\n\n       df_cpi <- cbsodataR::cbs_get_data(\"83131ned\") %>%\n                cbsodataR::cbs_add_date_column() %>%\n                cbsodataR::cbs_add_label_columns() %>%\n                filter(Perioden_freq == \"Y\",\n                       Bestedingscategorieen_label == \"000000 Alle bestedingen\") %>%\n                select(Bestedingscategorieen_label, Perioden_label, CPI_1 )\n\n        if (save_cbs_data) {\n                if (!dir.exists(here::here(save_dir))) {\n                        dir.create(here::here(save_dir), recursive = T)\n                }\n\n             readr::write_rds(x = df_cpi, file = here(paste0(save_dir, file_name)))\n        }\n\n        df_cpi\n\n}\n```\n:::\n\n\n## What do we need? 🤔\n::: {style=\"font-size: 45%;\"}\n<br>\n\n| Description of type                                                  | Input                                                                            | Output                           |   |   |\n|----------------------------------------------------------------------|----------------------------------------------------------------------------------|----------------------------------|---|---|\n| Function to return the correct indexing factor between two years     | start year, end year                                                             | CPI factor                       |   |   |\n| Function to print a table of all used CPI indexes used               | start years, end years                                                           | CPI table with years             |   |   |\n| Function to discount (costs or effects)                              | discount rate, (cycle) time                                                      | Discount rate given (cycle) time |   |   |\n| Function to convert currencies using purchasing power parities (PPP) | reference year, reference currency, target currency                              | Conversion rate                  |   |   |\n| Function to convert and discount at the same time                    | reference year, target year, reference currency, target currency                 | Conversion and CPI combined      |   |   |\n| Reference prices of guideline stored as data frame                   | none                                                                             | Data frame with reference prices |   |   |\n| Function to apply yearly depreciation and interest                   | new price, replacement price, residual value, depreciation period, interest rate | yearly depreciation and interest |   |   |\n| Function to return the frictionperiod for a specified year           | year of interest                                                                 | friction period                  |   |   |\n| Function to return productivity costs for a specified year           | year of interest                                                                 | productivity costs               |   |   |\n:::\n\n## The road to package development 🏎️\n\n\n```{mermaid}\n%%| fig-height: 1000\nflowchart TD\n  A[Functions are mapped out for each chapter] --> B[Formation of teams consisting of 2/3 individuals]\nB --> C[Each team selects a function]\nC --> D[Working in the R Journal Club on this function in three ways]\nD --> E[Validating]\nD --> F[Rewriting - start from scratch]\nD --> G[Find and write]\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}